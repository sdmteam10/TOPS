{"version":3,"sources":["components/navbar.js","components/edit.js","components/create.js","components/recordList.js","App.js","index.js"],"names":["Navbar","className","to","type","id","Edit","props","onChangePersonName","bind","onChangePersonPosition","onChangePersonLevel","onSubmit","state","person_name","person_position","person_level","records","axios","get","this","match","params","then","response","setState","data","catch","error","console","log","e","target","value","preventDefault","newEditedperson","post","res","history","push","align","onChange","name","checked","Component","withRouter","Create","newperson","style","marginTop","Record","record","_id","href","onClick","deleteRecord","RecordList","delete","filter","el","map","currentrecord","recordList","App","exact","path","component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f3332ab2.chunk.js","sourcesContent":["import React from \"react\";\n\n// We import bootstrap to make our application look better.\nimport \"bootstrap/dist/css/bootstrap.css\";\n\n// We import NavLink to utilize the react router.\nimport { NavLink } from \"react-router-dom\";\n\n// Here, we display our Navbar\nconst Navbar = () => {\n  return (\n    <div>\n      <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\n        <NavLink className=\"navbar-brand\" to=\"/\">\n          MongoDB\n        </NavLink>\n        <button\n          className=\"navbar-toggler\"\n          type=\"button\"\n          data-toggle=\"collapse\"\n          data-target=\"#navbarSupportedContent\"\n          aria-controls=\"navbarSupportedContent\"\n          aria-expanded=\"false\"\n          aria-label=\"Toggle navigation\"\n        >\n          <span className=\"navbar-toggler-icon\"></span>\n        </button>\n\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n          <ul className=\"navbar-nav ml-auto\">\n            <li className=\"nav-item\">\n              <NavLink className=\"nav-link\" to=\"/create\">\n                Create Record\n              </NavLink>\n            </li>\n          </ul>\n        </div>\n      </nav>\n    </div>\n  );\n};\n\nexport default Navbar;","import React, { Component } from \"react\";\n// This will require to npm install axios\nimport axios from 'axios';\nimport { withRouter } from \"react-router\";\n\nclass Edit extends Component {\n  // This is the constructor that stores the data.\n  constructor(props) {\n    super(props);\n\n    this.onChangePersonName = this.onChangePersonName.bind(this);\n    this.onChangePersonPosition = this.onChangePersonPosition.bind(this);\n    this.onChangePersonLevel = this.onChangePersonLevel.bind(this);\n    this.onSubmit = this.onSubmit.bind(this);\n\n    this.state = {\n      person_name: \"\",\n      person_position: \"\",\n      person_level: \"\",\n      records: [],\n    };\n  }\n  // This will get the record based on the id from the database.\n  componentDidMount() {\n    axios\n      .get(\"http://localhost:3000/record/\" + this.props.match.params.id)\n      .then((response) => {\n        this.setState({\n          person_name: response.data.person_name,\n          person_position: response.data.person_position,\n          person_level: response.data.person_level,\n        });\n      })\n      .catch(function (error) {\n        console.log(error);\n      });\n  }\n\n  // These methods will update the state properties.\n  onChangePersonName(e) {\n    this.setState({\n      person_name: e.target.value,\n    });\n  }\n\n  onChangePersonPosition(e) {\n    this.setState({\n      person_position: e.target.value,\n    });\n  }\n\n  onChangePersonLevel(e) {\n    this.setState({\n      person_level: e.target.value,\n    });\n  }\n\n  // This function will handle the submission.\n  onSubmit(e) {\n    e.preventDefault();\n    const newEditedperson = {\n      person_name: this.state.person_name,\n      person_position: this.state.person_position,\n      person_level: this.state.person_level,\n    };\n    console.log(newEditedperson);\n\n    // This will send a post request to update the data in the database.\n    axios\n      .post(\n        \"http://localhost:3000/update/\" + this.props.match.params.id,\n        newEditedperson\n      )\n      .then((res) => console.log(res.data));\n\n    this.props.history.push(\"/\");\n  }\n\n  // This following section will display the update-form that takes the input from the user to update the data.\n  render() {\n    return (\n      <div>\n        <h3 align=\"center\">Update Record</h3>\n        <form onSubmit={this.onSubmit}>\n          <div className=\"form-group\">\n            <label>Person's Name: </label>\n            <input\n              type=\"text\"\n              className=\"form-control\"\n              value={this.state.person_name}\n              onChange={this.onChangePersonName}\n            />\n          </div>\n          <div className=\"form-group\">\n            <label>Position: </label>\n            <input\n              type=\"text\"\n              className=\"form-control\"\n              value={this.state.person_position}\n              onChange={this.onChangePersonPosition}\n            />\n          </div>\n          <div className=\"form-group\">\n            <div className=\"form-check form-check-inline\">\n              <input\n                className=\"form-check-input\"\n                type=\"radio\"\n                name=\"priorityOptions\"\n                id=\"priorityLow\"\n                value=\"Intern\"\n                checked={this.state.person_level === \"Intern\"}\n                onChange={this.onChangePersonLevel}\n              />\n              <label className=\"form-check-label\">Intern</label>\n            </div>\n            <div className=\"form-check form-check-inline\">\n              <input\n                className=\"form-check-input\"\n                type=\"radio\"\n                name=\"priorityOptions\"\n                id=\"priorityMedium\"\n                value=\"Junior\"\n                checked={this.state.person_level === \"Junior\"}\n                onChange={this.onChangePersonLevel}\n              />\n              <label className=\"form-check-label\">Junior</label>\n            </div>\n            <div className=\"form-check form-check-inline\">\n              <input\n                className=\"form-check-input\"\n                type=\"radio\"\n                name=\"priorityOptions\"\n                id=\"priorityHigh\"\n                value=\"Senior\"\n                checked={this.state.person_level === \"Senior\"}\n                onChange={this.onChangePersonLevel}\n              />\n              <label className=\"form-check-label\">Senior</label>\n            </div>\n          </div>\n          <br />\n\n          <div className=\"form-group\">\n            <input\n              type=\"submit\"\n              value=\"Update Record\"\n              className=\"btn btn-primary\"\n            />\n          </div>\n        </form>\n      </div>\n    );\n  }\n}\n\n// You can get access to the history object's properties and the closest <Route>'s match via the withRouter\n// higher-order component. This makes it easier for us to edit our records.\n\nexport default withRouter(Edit);","import React, { Component } from \"react\";\n// This will require to npm install axios\nimport axios from 'axios';\n\nexport default class Create extends Component {\n  // This is the constructor that stores the data.\n  constructor(props) {\n    super(props);\n\n    this.onChangePersonName = this.onChangePersonName.bind(this);\n    this.onChangePersonPosition = this.onChangePersonPosition.bind(this);\n    this.onChangePersonLevel = this.onChangePersonLevel.bind(this);\n    this.onSubmit = this.onSubmit.bind(this);\n\n    this.state = {\n      person_name: \"\",\n      person_position: \"\",\n      person_level: \"\",\n    };\n  }\n\n  // These methods will update the state properties.\n  onChangePersonName(e) {\n    this.setState({\n      person_name: e.target.value,\n    });\n  }\n\n  onChangePersonPosition(e) {\n    this.setState({\n      person_position: e.target.value,\n    });\n  }\n\n  onChangePersonLevel(e) {\n    this.setState({\n      person_level: e.target.value,\n    });\n  }\n\n// This function will handle the submission.\n  onSubmit(e) {\n    e.preventDefault();\n\n    // When post request is sent to the create url, axios will add a new record(newperson) to the database.\n    const newperson = {\n      person_name: this.state.person_name,\n      person_position: this.state.person_position,\n      person_level: this.state.person_level,\n    };\n\n    axios\n      .post(\"http://localhost:3000/record/add\", newperson)\n      .then((res) => console.log(res.data));\n\n    // We will empty the state after posting the data to the database\n    this.setState({\n      person_name: \"\",\n      person_position: \"\",\n      person_level: \"\",\n    });\n  }\n\n  // This following section will display the form that takes the input from the user.\n  render() {\n    return (\n      <div style={{ marginTop: 20 }}>\n        <h3>Create New Record</h3>\n        <form onSubmit={this.onSubmit}>\n          <div className=\"form-group\">\n            <label>Name of the person: </label>\n            <input\n              type=\"text\"\n              className=\"form-control\"\n              value={this.state.person_name}\n              onChange={this.onChangePersonName}\n            />\n          </div>\n          <div className=\"form-group\">\n            <label>Person's position: </label>\n            <input\n              type=\"text\"\n              className=\"form-control\"\n              value={this.state.person_position}\n              onChange={this.onChangePersonPosition}\n            />\n          </div>\n          <div className=\"form-group\">\n            <div className=\"form-check form-check-inline\">\n              <input\n                className=\"form-check-input\"\n                type=\"radio\"\n                name=\"priorityOptions\"\n                id=\"priorityLow\"\n                value=\"Intern\"\n                checked={this.state.person_level === \"Intern\"}\n                onChange={this.onChangePersonLevel}\n              />\n              <label className=\"form-check-label\">Intern</label>\n            </div>\n            <div className=\"form-check form-check-inline\">\n              <input\n                className=\"form-check-input\"\n                type=\"radio\"\n                name=\"priorityOptions\"\n                id=\"priorityMedium\"\n                value=\"Junior\"\n                checked={this.state.person_level === \"Junior\"}\n                onChange={this.onChangePersonLevel}\n              />\n              <label className=\"form-check-label\">Junior</label>\n            </div>\n            <div className=\"form-check form-check-inline\">\n              <input\n                className=\"form-check-input\"\n                type=\"radio\"\n                name=\"priorityOptions\"\n                id=\"priorityHigh\"\n                value=\"Senior\"\n                checked={this.state.person_level === \"Senior\"}\n                onChange={this.onChangePersonLevel}\n              />\n              <label className=\"form-check-label\">Senior</label>\n            </div>\n          </div>\n          <div className=\"form-group\">\n            <input\n              type=\"submit\"\n              value=\"Create person\"\n              className=\"btn btn-primary\"\n            />\n          </div>\n        </form>\n      </div>\n    );\n  }\n}","import React, { Component } from \"react\";\n// This will require to npm install axios\nimport axios from 'axios';\nimport { Link } from \"react-router-dom\";\n\nconst Record = (props) => (\n  <tr>\n    <td>{props.record.person_name}</td>\n    <td>{props.record.person_position}</td>\n    <td>{props.record.person_level}</td>\n    <td>\n      <Link to={\"/edit/\" + props.record._id}>Edit</Link> |\n      <a\n        href=\"/\"\n        onClick={() => {\n          props.deleteRecord(props.record._id);\n        }}\n      >\n        Delete\n      </a>\n    </td>\n  </tr>\n);\n\nexport default class RecordList extends Component {\n  // This is the constructor that shall store our data retrieved from the database\n  constructor(props) {\n    super(props);\n    this.deleteRecord = this.deleteRecord.bind(this);\n    this.state = { records: [] };\n  }\n\n  // This method will get the data from the database.\n  componentDidMount() {\n    axios\n      .get(\"http://localhost:3000/record/\")\n      .then((response) => {\n        this.setState({ records: response.data });\n      })\n      .catch(function (error) {\n        console.log(error);\n      });\n  }\n\n  // This method will delete a record based on the method\n  deleteRecord(id) {\n    axios.delete(\"http://localhost:3000/\" + id).then((response) => {\n      console.log(response.data);\n    });\n\n    this.setState({\n      record: this.state.records.filter((el) => el._id !== id),\n    });\n  }\n\n  // This method will map out the users on the table\n  recordList() {\n    return this.state.records.map((currentrecord) => {\n      return (\n        <Record\n          record={currentrecord}\n          deleteRecord={this.deleteRecord}\n          key={currentrecord._id}\n        />\n      );\n    });\n  }\n\n  // This following section will display the table with the records of individuals.\n  render() {\n    return (\n      <div>\n        <h3>Record List</h3>\n        <table className=\"table table-striped\" style={{ marginTop: 20 }}>\n          <thead>\n            <tr>\n              <th>Name</th>\n              <th>Position</th>\n              <th>Level</th>\n              <th>Action</th>\n            </tr>\n          </thead>\n          <tbody>{this.recordList()}</tbody>\n        </table>\n      </div>\n    );\n  }\n}\n\n\n\n\n","import React from \"react\";\n\n// We use Route in order to define the different routes of our application\nimport { Route } from \"react-router-dom\";\n\n// We import all the components we need in our app\nimport Navbar from \"./components/navbar\";\nimport Edit from \"./components/edit\";\nimport Create from \"./components/create\";\nimport RecordList from \"./components/recordList\";\n\nconst App = () => {\n  return (\n    <div>\n      <Navbar />\n      <Route exact path=\"/\">\n        <RecordList />\n      </Route>\n      <Route path=\"/edit/:id\" component={Edit} />\n      <Route path=\"/create\">\n        <Create />\n      </Route>\n    </div>\n  );\n};\n\nexport default App;","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport { BrowserRouter } from \"react-router-dom\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);"],"sourceRoot":""}